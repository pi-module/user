# user ID: the unique identity in the user system
# user identity: the user's unique identity, generated by the system or sent from other systems like openID
# all local data of a user should be indexed by user ID

# User accout and authentication data
CREATE TABLE `{account}` (
  `id`              int(10)         unsigned    NOT NULL    auto_increment,
  `identity`        varchar(64)     NOT NULL,
  `credential`      varchar(255)    NOT NULL default '',    # Credential hash
  `salt`            varchar(255)    NOT NULL default '',    # Hash salt
  `email`           varchar(64)     NOT NULL,
  `name`            varchar(255)    NOT NULL default '',
  `active`          tinyint(1)      unsigned NOT NULL default '0',
  `ban`             tinyint(1)      unsigned NOT NULL default '0',
  `deleted`         tinyint(1)      unsigned NOT NULL default '1',

  PRIMARY KEY  (`id`),
  UNIQUE  KEY `identity` (`identity`),
  UNIQUE  KEY `email` (`email`)
# KEY `authenticate` (`identity`, `credential`)
);

#Entity meta for base profile
CREATE TABLE `{profile}` (
  `id`          int(10)                unsigned NOT NULL auto_increment,
  `uid`         int(10)                unsigned NOT NULL,
  `fullname`    varchar(255)           NOT NULL default '',
  `birthday`    int(10)                NOT NULL default '0',
  `gender`      enum('M', 'F', '')     NOT NULL default 'M',
  `avatar`      text,
  `bio`         text,
  `location`    varchar(255)           NOT NULL default '',

  PRIMARY KEY (`id`),
  UNIQUE  KEY `uid` (`uid`)
);

# Entity meta for all profile fields: account, basic profile and custom fields
CREATE TABLE `{field}` (
  `id`              smallint(5)     unsigned    NOT NULL    auto_increment,
  `name`            varchar(64)     NOT NULL,
  `module`          varchar(64)     NOT NULL default '',
  `title`           varchar(255)    NOT NULL default '',
  `edit`            text,           # callback options for edit
  `filter`          text,           # callback options for output filtering

  `type`            ENUM('custom', 'account', 'profile'),   # Field type, default as custom
  `is_edit`         tinyint(1)      NOT NULL default '0',   # Is editable
  `is_search`       tinyint(1)      NOT NULL default '0',   # Is searchable
  `is_display`      tinyint(1)      NOT NULL default '0',   # Display on profile page
  `active`          tinyint(1)      NOT NULL default '0',   # Is active

  PRIMARY KEY  (`id`),
  UNIQUE KEY  `name` (`name`)
);

#Entity meta for extend profile
CREATE TABLE `{custom}` (
  `id`         int(10)                unsigned NOT NULL auto_increment,
  `uid`        int(10)                unsigned NOT NULL,
  `field`      varchar(64)            NOT NULL default '',
  `value`      text,

  PRIMARY KEY (`id`),
  unique KEY `field` (`uid`, `field`)
);

#Entity meta for user education
CREATE TABLE `{education}` (
  `id`         int(10)                unsigned NOT NULL auto_increment,
  `uid`        int(10)                unsigned NOT NULL,
  `start_date` int(10)                unsigned NOT NULL default '0',
  `end_data`   int(10)                unsigned NOT NULL default '0',
  `school`     varchar(255)           NOT NULL default '',
  `degree`     varchar(255)           NOT NULL default '',
  `major`      varchar(255)           NOT NULL default '',
  `class`      varchar(255)           NOT NULL default '',

  PRIMARY KEY (`id`)
);

#Profile category
CREATE TABLE `{profile_group}` (
  `id`         int(10)                unsigned NOT NULL auto_increment,
  `name`       varchar(64)            NOT NULL default '',
  `title`      varchar(255)            NOT NULL default '',
  `order`      smallint(5)            unsigned NOT NULL default '0',

  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
);

#Profile field
CREATE TABLE `{profile_display}` (
  `id`         int(10)                unsigned NOT NULL auto_increment,
  `name`       varchar(64)            NOT NULL default '',
  `group`      varchar(64)            NOT NULL default '',
  `order`      smallint(5)            unsigned NOT NULL default '0',

  PRIMARY KEY (`id`)
);

#User data for user activity
CREATE TABLE `{user_log}` (
  `id`               int(10)            unsigned NOT NULL auto_increment,
  `uid`              int(10)            unsigned NOT NULL,
  `time_update`      int(10)            unsigned NOT NULL default '0',
  `time_register`    int(10)            unsigned NOT NULL default '0',
  `time_last_login`  int(10)            unsigned NOT NULL default '0',
  `last_login_ip`    varchar(15)        NOT NULL default '',
  `register_ip`      varchar(15)        NOT NULL default '',
  `complete_profile` tinyint(1)         NOT NULL default '0',

  PRIMARY KEY (`id`),
  UNIQUE  KEY `uid` (`uid`)
);

# Timeline meta
CREATE TABLE `{timeline_type}` (
  `id`              int(10)         unsigned    NOT NULL    auto_increment,
  `name`            varchar(64)     NOT NULL    default '',
  `title`           varchar(255)    NOT NULL    default '',
  `module`          varchar(64)     NOT NULL    default '',
  `icon`            text,

  PRIMARY KEY  (`id`),
  UNIQUE KEY `name` (`module`, `name`)
);

# Timeline for user activities
CREATE TABLE `{timeline}` (
  `id`              int(10)         unsigned    NOT NULL    auto_increment,
  `uid`             int(10)         unsigned    NOT NULL,
  `type`            varchar(64)     NOT NULL    default '',
  `module`          varchar(64)     NOT NULL    default '',
  `message`         text,
  `link`            text,
  `time`            int(11)         unsigned    NOT NULL,

  PRIMARY KEY  (`id`)
);

CREATE TABLE `{quicklink}` (
  `id`              int(10)         unsigned    NOT NULL    auto_increment,
  `name`            varchar(64)     NOT NULL    default '',
  `title`           varchar(255)    NOT NULL    default '',
  `module`          varchar(64)     NOT NULL    default '',
  `link`            text,
  `icon`            text,
  `order`           smallint(5)     unsigned    NOT NULL default '0',

  PRIMARY KEY  (`id`),
  UNIQUE KEY `name` (`module`, `name`)
);

# Activity meta
CREATE TABLE `{activity}` (
  `id`              int(10)         unsigned    NOT NULL    auto_increment,
  `name`            varchar(64)     NOT NULL    default '',
  `title`           varchar(255)    NOT NULL    default '',
  `module`          varchar(64)     NOT NULL    default '',
  `link`            text,
  `icon`            text,
  `order`           smallint(5)     unsigned    NOT NULL default '0',

  PRIMARY KEY  (`id`),
  UNIQUE KEY `name` (`module`, `name`)
);

#Token
CREATE TABLE `{token}` (
  `id`          int(10)               unsigned NOT NULL auto_increment,
  `uid`         int(10)               unsigned NOT NULL,
  `type`        varchar(32)           NOT NULL default '',
  `code`        varchar(255)          NOT NULL default '',
  `time`        int(10)               unsigned NOT NULL default '0',

  PRIMARY KEY (`id`),
  UNIQUE KEY `uid` (`uid`)
);

#Privacy control
CREATE TABLE `{privacy}` (
  `id`        int(10)              unsigned NOT NULL auto_increment,
  `uid`       int(10)              unsigned NOT NULL,
  `name`      varchar(64)          NOT NULL default '',
  `value`     varchar(64)          NOT NULL default '',
  `visitor`   varchar(64)          NOT NULL default '',

  PRIMARY KEY (`id`)
);

#Privacy field controller
CREATE TABLE `{privacy_field}` (
  `id`        int(10)              unsigned NOT NULL auto_increment,
  `name`      varchar(64)          NOT NULL default '',
  `value`     varchar(64)          NOT NULL default '',
  `force`     tinyint(1)           NOT NULL default '0',
  `visible`   tinyint(1)           NOT NULL default '0',

  PRIMARY KEY (`id`)
);

# user-role links for regular
CREATE TABLE `{role}` (
  `id`              int(10)         unsigned    NOT NULL    auto_increment,
  `uid`             int(10)         unsigned    NOT NULL,
  `role`            varchar(64)     NOT NULL    default '',

  PRIMARY KEY  (`id`),
  UNIQUE KEY `uid` (`uid`)
);

# user-role links for staff
CREATE TABLE `{staff}` (
  `id`              int(10)         unsigned    NOT NULL    auto_increment,
  `uid`             int(10)         unsigned    NOT NULL,
  `role`            varchar(64)     NOT NULL    default '',

  PRIMARY KEY  (`id`),
  UNIQUE KEY `uid` (`uid`)
);